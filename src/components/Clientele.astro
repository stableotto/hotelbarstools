---
// Clientele component - using content collections for dynamic client management
// Following rules: error handling, performance optimization, DRY principles

import { getCollection } from 'astro:content';

// Get clientele from content collections with error handling
let clientele;
let sortedClients = [];

try {
  clientele = await getCollection('clientele');
  
  // Sort by order and featured status
  sortedClients = clientele.sort((a, b) => {
    // Featured clients first
    if (a.data.featured && !b.data.featured) return -1;
    if (!a.data.featured && b.data.featured) return 1;
    // Then by order
    return a.data.order - b.data.order;
  });
} catch (error) {
  console.error('Error loading clientele:', error);
  // Fallback to empty array if content collections fail
  sortedClients = [];
}

// Transform to display format and add fallback static data if needed
const displayClients = sortedClients.map((client) => ({
  name: client.data.name,
  logo: client.data.logo,
  website: client.data.website,
  order: client.data.order
}));

// Add static fallback clients if content collection is empty or incomplete
const fallbackClients = [
  {
    name: "Marriott International",
    logo: "/images/clients/marriott.svg",
    website: "https://marriott.com",
    order: 4
  },
  {
    name: "Hilton Hotels",
    logo: "/images/clients/hilton.svg",
    website: "https://hilton.com",
    order: 5
  },
  {
    name: "W Hotels",
    logo: "/images/clients/w-hotels.svg",
    website: "https://whotels.com",
    order: 6
  },
  {
    name: "Grand Hyatt",
    logo: "/images/clients/hyatt.svg",
    website: "https://hyatt.com",
    order: 7
  },
  {
    name: "The St. Regis",
    logo: "/images/clients/st-regis.svg",
    website: "https://stregis.com",
    order: 8
  }
];

// Combine content collections with fallback data to ensure 8 clients display
const allClients = [...displayClients, ...fallbackClients]
  .filter((client, index, self) => 
    index === self.findIndex(c => c.name === client.name)
  )
  .sort((a, b) => a.order - b.order)
  .slice(0, 8); // Limit to 8 for grid layout
---

<section class="clientele" id="clientele">
  <div class="container">
    <div class="clientele-header">
      <h2 class="section-title">Trusted by Leading Hotels Worldwide</h2>
      <p class="section-subtitle">
        Our premium bar stools grace the finest establishments across the globe
      </p>
    </div>

    <div class="clients-grid">
      {allClients.map((client, index) => (
        <div class="client-item" data-aos="fade-up" data-aos-delay={index * 100}>
          <a 
            href={client.website}
            target="_blank"
            rel="noopener noreferrer"
            class="client-link"
            aria-label={`Visit ${client.name} website`}
          >
            <img
              data-src={client.logo}
              alt={`${client.name} logo`}
              class="client-logo"
              width="200"
              height="80"
              loading="lazy"
            />
            <span class="client-name sr-only">{client.name}</span>
          </a>
        </div>
      ))}
    </div>

    <!-- Trust indicators -->
    <div class="trust-indicators">
      <div class="trust-item">
        <span class="trust-number">500+</span>
        <span class="trust-label">Hotels Worldwide</span>
      </div>
      <div class="trust-item">
        <span class="trust-number">50+</span>
        <span class="trust-label">Countries</span>
      </div>
      <div class="trust-item">
        <span class="trust-number">15+</span>
        <span class="trust-label">Years Experience</span>
      </div>
    </div>
  </div>
</section>

<style>
  .clientele {
    padding: var(--space-xl) 0;
    background-color: var(--color-secondary);
    position: relative;
    overflow: hidden;
  }

  .clientele::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(
      90deg,
      transparent 0%,
      var(--color-accent) 50%,
      transparent 100%
    );
  }

  .clientele-header {
    text-align: center;
    margin-bottom: var(--space-xl);
  }

  .section-title {
    font-size: clamp(2rem, 5vw, 3rem);
    font-weight: 600;
    color: var(--color-primary);
    margin-bottom: var(--space-sm);
    line-height: 1.2;
  }

  .section-subtitle {
    font-size: var(--font-size-lg);
    color: var(--color-text-light);
    max-width: 600px;
    margin: 0 auto;
    line-height: 1.5;
  }

  /* Client Grid */
  .clients-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: var(--space-lg);
    margin-bottom: var(--space-xl);
    align-items: center;
  }

  .client-item {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--space-md);
    background-color: var(--color-white);
    border-radius: 12px;
    box-shadow: var(--shadow-sm);
    transition: all var(--transition-normal);
    position: relative;
    overflow: hidden;
  }

  .client-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent 0%,
      rgba(212, 165, 116, 0.1) 50%,
      transparent 100%
    );
    transition: left var(--transition-slow);
  }

  .client-item:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-lg);
  }

  .client-item:hover::before {
    left: 100%;
  }

  .client-link {
    display: block;
    width: 100%;
    text-decoration: none;
    transition: opacity var(--transition-fast);
  }

  .client-link:focus {
    outline: 2px solid var(--color-accent);
    outline-offset: 4px;
    border-radius: 4px;
  }

  .client-logo {
    width: 100%;
    height: auto;
    max-width: 160px;
    max-height: 60px;
    object-fit: contain;
    filter: grayscale(1) opacity(0.7);
    transition: all var(--transition-normal);
  }

  .client-item:hover .client-logo {
    filter: grayscale(0) opacity(1);
    transform: scale(1.05);
  }

  /* Trust Indicators */
  .trust-indicators {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: var(--space-md);
    padding-top: var(--space-xl);
    border-top: 1px solid rgba(212, 165, 116, 0.2);
  }

  .trust-item {
    text-align: center;
    padding: var(--space-md);
  }

  .trust-number {
    display: block;
    font-size: var(--font-size-4xl);
    font-weight: 700;
    color: var(--color-accent);
    line-height: 1;
    margin-bottom: var(--space-xs);
  }

  .trust-label {
    font-size: var(--font-size-sm);
    color: var(--color-text-light);
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  /* Tablet Styles */
  @media (min-width: 768px) {
    .clients-grid {
      grid-template-columns: repeat(3, 1fr);
      gap: var(--space-xl);
    }

    .client-item {
      padding: var(--space-lg);
    }

    .client-logo {
      max-width: 180px;
      max-height: 70px;
    }
  }

  /* Desktop Styles */
  @media (min-width: 1024px) {
    .clientele {
      padding: calc(var(--space-xl) * 1.5) 0;
    }

    .clients-grid {
      grid-template-columns: repeat(4, 1fr);
      gap: var(--space-xl);
    }

    .client-item {
      padding: var(--space-xl);
    }

    .client-logo {
      max-width: 200px;
      max-height: 80px;
    }

    .trust-indicators {
      gap: var(--space-lg);
    }

    .trust-item {
      padding: var(--space-lg);
    }
  }

  /* Large Desktop */
  @media (min-width: 1440px) {
    .clients-grid {
      gap: calc(var(--space-xl) * 1.5);
    }
  }

  /* Accessibility */
  @media (prefers-reduced-motion: reduce) {
    .client-item,
    .client-logo,
    .client-item::before {
      transition: none;
    }

    .client-item:hover {
      transform: none;
    }

    .client-item:hover .client-logo {
      transform: none;
    }
  }

  /* High contrast mode */
  @media (prefers-contrast: high) {
    .client-item {
      border: 2px solid var(--color-text);
    }

    .client-logo {
      filter: none;
    }

    .section-title {
      color: var(--color-black);
    }
  }

  /* Print styles */
  @media print {
    .clientele {
      padding: var(--space-md) 0;
      background: transparent;
    }

    .clients-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: var(--space-sm);
    }

    .client-item {
      box-shadow: none;
      border: 1px solid var(--color-text);
    }

    .trust-indicators {
      display: none;
    }
  }
</style> 